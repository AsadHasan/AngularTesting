var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
(function (dependencies, factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(dependencies, factory);
    }
})(["require", "exports", "inversify", "./LodashUtilities"], function (require, exports) {
    "use strict";
    const inversify_1 = require("inversify");
    const LodashUtilities_1 = require("./LodashUtilities");
    /**
     * Encapsulates all the Inversify context being applied during binding execution.
     */
    class KernelContext {
        /**
         * Initializes a new Kernel Context object.
         */
        constructor() {
            this.underlyingKernel = new inversify_1.Kernel();
        }
        /**
         * Gets the underlying Inversify Kernel being used for Dependency Injection operations.
         *
         * @returns A {@linkcode Kernel}.
         */
        get kernel() {
            return this.underlyingKernel;
        }
        /**
         * Gets the current Kernel Context.
         *
         * @returns A {@linkcode KernelContext}.
         */
        static get current() {
            return KernelContext.getOrCreateInstance();
        }
        /**
         * Gets or creates the Kernel Context instance.
         *
         * @returns A {@linkcode KernelContext}.
         *
         * @remarks
         * The Kernel Context returned from the first invocation is returned on all subsequent
         * invocations to {@linkcode KernelContext#getOrCreateInstance}.
         */
        static getOrCreateInstance() {
            return new KernelContext();
        }
    }
    exports.KernelContext = KernelContext;
    __decorate([
        LodashUtilities_1.once(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", KernelContext)
    ], KernelContext, "getOrCreateInstance", null);
});
//# sourceMappingURL=KernelContext.js.map